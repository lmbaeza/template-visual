{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/silver/func-graphs",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\n/*<Spoiler title=\"Tortoise and Hare Algrotihm\">\n\n```cpp\n//UNTESTED\npair<int, int> detect_cycle(int *next, int start_node) //return pair(length of cycle, distance from start node to in cycle)\n{\nint t=start_node, h=start_node; //tortoise and hare\ndo\n{\nt=next[t], h=next[h];\n} while(t != h)\n\nint dist=0;\nt = start_node;\nwhile(t != h)\n++dist, t=next[t], h=next[h];\n\nint len=1;\nh = next[t];\nwhile(h != t)\n++len, h=next[h];\nreturn make_pair(len, dist);\n}\n```\n\n</Spoiler>*/\n/*https://codeforces.com/contest/1137/submission/87195511*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"func-graphs\", title = \"(Optional) Introduction to Functional Graphs\", author = \"Siyong Huang, Benjamin Qi, Andrew Wang\", contributors = \"Chuyang Wang\", prerequisites = [\"intro-tree\"], description = \"Directed graphs in which every vertex has exactly one outgoing edge.\", frequency = 1;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    Warning: _missingComponent(\"Warning\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    Spoiler: _missingComponent(\"Spoiler\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    PySection: _missingComponent(\"PySection\"),\n    Problems: _missingComponent(\"Problems\")\n  }, _props.components), {Warning, HeaderLink, Resources, Resource, MATHSPAN, FocusProblem, Spoiler, LanguageSection, CPPSection, JavaSection, PySection, Problems, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Warning, {\n      children: _jsx(_components.p, {\n        children: \"No Silver problem has required knowledge of the content presented in this\\nmodule.\"\n      })\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"introduction\",\n      children: [_jsx(_components.a, {\n        href: \"#introduction\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Introduction\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In a \", _jsx(_components.strong, {\n        children: \"functional graph\"\n      }), \", each node has exactly one out-edge. This is also\\ncommonly referred to as a \", _jsx(_components.strong, {\n        children: \"successor graph\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Resources, {\n      children: _jsx(Resource, {\n        source: \"CPH\",\n        title: \"16.3 - Successor Graphs\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"diagrams\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can think of every connected component of a functional graph as a rooted\\ntree plus an additional edge going out of the root.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"floyds-algorithm\",\n      children: [_jsx(_components.a, {\n        href: \"#floyds-algorithm\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Floyd's Algorithm\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Floyd's Algorithm\"\n      }), \", also commonly referred to as the \", _jsx(_components.strong, {\n        children: \"Tortoise and Hare\\nAlgorithm\"\n      }), \", is capable of detecting cycles in a functional graph in\\n\", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(1)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" memory (not counting the graph\\nitself).\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"16.4 - Cycle Detection\",\n        starred: true\n      }), _jsx(Resource, {\n        source: \"Medium\",\n        title: \"The Tortoise and the Hare (Floyd's Algorithm)\",\n        url: \"https://medium.com/@tuvo1106/the-tortoise-and-the-hare-floyds-algorithm-87badf5f7d41\"\n      }), _jsx(Resource, {\n        source: \"CP2\",\n        title: \"5.7 - Cycle-Finding\"\n      }), _jsx(Resource, {\n        source: \"VisuAlgo\",\n        title: \"Floyd's Algorithm Visualization\",\n        url: \"https://visualgo.net/en/cyclefinding\"\n      })]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"example---cooperative-game\",\n      children: [_jsx(_components.a, {\n        href: \"#example---cooperative-game\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example - Cooperative Game\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sample_floyd\"\n    }), \"\\n\", \"\\n\", _jsx(Spoiler, {\n      title: \"Hint 1\",\n      children: _jsx(_components.p, {\n        children: \"Solve the problem when there are exactly three friends.\"\n      })\n    }), \"\\n\", _jsx(Spoiler, {\n      title: \"Hint 2\",\n      children: _jsxs(_components.p, {\n        children: [\"Reread \", _jsx(_components.a, {\n          href: \"/CPH.pdf#page=166\",\n          children: \"CPH pg. 166\"\n        }), \" a few more times.\"]\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution\",\n      children: [_jsx(_components.a, {\n        href: \"#solution\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution\"]\n    }), \"\\n\", _jsxs(Spoiler, {\n      title: \"Solution\",\n      children: [_jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://codeforces.com/blog/entry/65825\",\n          target: \"_blank\",\n          rel: \"nofollow noopener noreferrer\",\n          children: \"Official Tutorial\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"Using \", _jsx(_components.strong, {\n          children: \"Floyd's Algorithm\"\n        }), \", we can find some node on the cycle after\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"2c\\\\left\\\\lceil \\\\frac{t}{c}\\\\right\\\\rceil\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn><mi>c</mi><mrow><mo fence=\\\"true\\\">⌈</mo><mfrac><mi>t</mi><mi>c</mi></mfrac><mo fence=\\\"true\\\">⌉</mo></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">2c\\\\left\\\\lceil \\\\frac{t}{c}\\\\right\\\\rceil</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.2em;vertical-align:-0.35em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mord mathnormal\\\">c</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size1\\\">⌈</span></span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8246em;\\\"><span style=\\\"top:-2.655em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">c</span></span></span></span><span style=\\\"top:-3.23em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"frac-line\\\" style=\\\"border-bottom-width:0.04em;\\\"></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathnormal mtight\\\">t</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"><span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mclose delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size1\\\">⌉</span></span></span></span></span></span>\"\n        }), \" queries. Then we can find the first node\\nin the cycle after another \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"t\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\\\"application/x-tex\\\">t</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6151em;\\\"></span><span class=\\\"mord mathnormal\\\">t</span></span></span></span>\"\n        }), \" queries.\"]\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"#include <cstdio>\\n#include <vector>\\n\\nvoid out(const std::vector<int>& x)\\n{\\n\\tprintf(\\\"next\\\");\\n\\tfor(auto a:x) printf(\\\" %d\\\", a);\\n\\tprintf(\\\"\\\\n\\\");\\n\\tfflush(stdout);\\n}\\nint N, g[20];\\nchar s[20];\\nvoid read()\\n{\\n\\tscanf(\\\"%d\\\", &N);\\n\\tfor (int i = 0; i < N; ++i)\\n\\t{\\n\\t\\tscanf(\\\" %s\\\", s);\\n\\t\\tfor (int j = 0; s[j]; ++j)\\n\\t\\t\\tg[s[j]-'0'] = i;\\n\\t}\\n}\\nint main()\\n{\\n\\tfor (;;) // c*ceil(t/c) times\\n\\t{\\n\\t\\tout({0,1});\\n\\t\\tread();\\n\\t\\tout({0});\\n\\t\\tread();\\n\\t\\tif(g[0] == g[1]) break;\\n\\t}\\n\\tfor (;;) // t times\\n\\t{\\n\\t\\tout({0,1,2,3,4,5,6,7,8,9});\\n\\t\\tread();\\n\\t\\tif(g[0] == g[2]) break;\\n\\t}\\n\\tprintf(\\\"done\\\\n\\\");\\n\\treturn 0;\\n}\\n\"\n            })\n          })\n        }), _jsx(JavaSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"import java.util.*;\\nimport java.io.*;\\n\\npublic class Cooperative {\\n\\tpublic static int g[];\\n\\tpublic static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\\n\\tpublic static void out(int arr[]) {\\n\\t\\tSystem.out.print(\\\"next\\\");\\n\\t\\tfor (int a: arr) {\\n\\t\\t\\tSystem.out.print(\\\" \\\" + a);\\n\\t\\t}\\n\\t\\tSystem.out.println();\\n\\t\\tSystem.out.flush();\\n\\t}\\n\\tpublic static void read() throws Exception {\\n\\t\\tStringTokenizer st = new StringTokenizer(br.readLine());\\n\\t\\tint N = Integer.parseInt(st.nextToken());\\n\\t\\tfor (int i = 0; i < N; i++) {\\n\\t\\t\\tString s = st.nextToken();\\n\\t\\t\\tfor (int j = 0; j < s.length(); j++)\\n\\t\\t\\t\\tg[s.charAt(j) - '0'] = i;\\n\\t\\t}\\n\\t}\\n\\tpublic static void main(String[] args) throws Exception {\\n\\t\\tg = new int[20];\\n\\t\\tfor (;;) { // c*ceil(t/c) times\\n\\t\\t\\tout(new int[]{0,1});\\n\\t\\t\\tread();\\n\\t\\t\\tout(new int[]{0});\\n\\t\\t\\tread();\\n\\t\\t\\tif (g[0] == g[1])\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tfor (;;) { // t times\\n\\t\\t\\tout(new int[]{0,1,2,3,4,5,6,7,8,9});\\n\\t\\t\\tread();\\n\\t\\t\\tif (g[0] == g[2])\\n\\t\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tSystem.out.println(\\\"done\\\");\\n\\t}\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"Do you see why this is equivalent to the code mentioned in CPH?\"\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"a = succ(x);\\nb = succ(succ(x));\\nwhile(a != b) {\\n\\ta = succ(a);\\n\\tb = succ(succ(b));\\n}\\n\"\n            })\n          })\n        }), _jsx(JavaSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"a = succ(x);\\nb = succ(succ(x));\\nwhile(a != b) {\\n\\ta = succ(a);\\n\\tb = succ(succ(b));\\n}\\n\"\n            })\n          })\n        })]\n      }), _jsx(\"br\", {}), _jsxs(_components.p, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        }), \" corresponds to friend \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n        }), \" corresponds to friend \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"0\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n        }), \".\"]\n      }), _jsxs(LanguageSection, {\n        children: [_jsx(CPPSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-cpp\",\n              children: \"a = x;\\nwhile(a != b) {\\n\\ta = succ(a);\\n\\tb = succ(b);\\n}\\nfirst = a;\\n\"\n            })\n          })\n        }), _jsx(JavaSection, {\n          children: _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-java\",\n              children: \"a = x;\\nwhile(a != b) {\\n\\ta = succ(a);\\n\\tb = succ(b);\\n}\\nfirst = a;\\n\"\n            })\n          })\n        })]\n      }), _jsx(\"br\", {}), _jsxs(_components.p, {\n        children: [_jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"a\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\\\"application/x-tex\\\">a</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">a</span></span></span></span>\"\n        }), \" corresponds to friends \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"2\\\\ldots 9\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn><mo>…</mo><mn>9</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2\\\\ldots 9</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"minner\\\">…</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord\\\">9</span></span></span></span>\"\n        }), \" and \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"b\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\\\"application/x-tex\\\">b</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\">b</span></span></span></span>\"\n        }), \" corresponds to friends \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"0\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">0</span></span></span></span>\"\n        }), \" and\\n\", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"1\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"example---badge\",\n      children: [_jsx(_components.a, {\n        href: \"#example---badge\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Example - Badge\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"sample\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"It's easy to solve the above problem in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N^2)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><msup><mi>N</mi><mn>2</mn></msup><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1.0641em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time. We'll solve it\\nin \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(N)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution-1\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-1\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 1\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\n\\nusing namespace std;\\n\\nint N;\\nvector<int> P,ans;\\nbool in_cycle;\\n\\nvoid gen(int x) {\\n\\tif (ans[x] != -2) {\\n\\t\\tif (ans[x] == -1) ans[x] = x, in_cycle = 1; // found a cycle!\\n\\t\\treturn;\\n\\t}\\n\\tans[x] = -1; gen(P[x]);\\n\\tif (ans[x] != -1) { in_cycle = 0; return; }\\n\\tans[x] = in_cycle ? x : ans[P[x]];\\n}\\n\\nint main() {\\n\\tcin >> N;\\n\\tP.assign(N, 0);\\n\\tfor(int& x:P) cin >> x, --x;\\n\\tans.assign(N, -2);\\n\\tfor(int i=0;i<N;++i) gen(i); // in_cycle is always reset to 0\\n\\tfor(int t:ans) cout << t+1 << \\\" \\\";\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.io.*;\\nimport java.util.*;\\n\\npublic class badge\\n{\\n\\tstatic BufferedReader reader;\\n\\tstatic PrintWriter writer;\\n\\tpublic static final int MN = 1010;\\n\\tpublic static int[] p, ans;\\n\\tpublic static boolean in_cycle;\\n\\tpublic static void dfs(int n)\\n\\t{\\n\\t\\tif(ans[n] != 0)\\n\\t\\t{\\n\\t\\t\\tif(ans[n] == -1) {in_cycle = true; ans[n] = n;} // found a cycle!\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tans[n]=-1; dfs(p[n]);\\n\\t\\tif(ans[n] != -1) in_cycle = false;\\n\\t\\telse ans[n] = in_cycle ? n : ans[p[n]];\\n\\t}\\n\\tpublic static void main(String[] args) throws IOException\\n\\t{\\n\\t\\treader = new BufferedReader(new InputStreamReader(System.in));\\n\\t\\twriter = new PrintWriter(System.out);\\n\\t\\tp = new int[MN]; ans = new int[MN];\\n\\n\\t\\tint N = Integer.parseInt(reader.readLine());\\n\\t\\tStringTokenizer st = new StringTokenizer(reader.readLine());\\n\\t\\tfor (int i=1;i<=N;++i)\\n\\t\\t\\tp[i]=Integer.parseInt(st.nextToken());\\n\\t\\treader.close();\\n\\n\\t\\tfor (int i=1;i<=N;++i)\\n\\t\\t\\tdfs(i); // in_cycle is always reset to false\\n\\n\\t\\tfor (int i=1;i<=N;++i)\\n\\t\\t\\twriter.print(ans[i]+\\\" \\\");\\n\\t\\twriter.close();\\n\\t}\\n}\\n\"\n          })\n        })\n      }), _jsx(PySection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-py\",\n            children: \"N=int(input())\\np=list(map(int, input().split()))\\nans=[-1]*N\\nin_cycle=False\\n\\ndef dfs(x):\\n\\tglobal in_cycle\\n\\tif ans[x] != -1:\\n\\t\\tif ans[x] == -2: # found a cycle!\\n\\t\\t\\tin_cycle = True\\n\\t\\t\\tans[x] = x\\n\\t\\treturn\\n\\tans[x] = -2\\n\\tdfs(p[x])\\n\\tif ans[x] != -2:\\n\\t\\tin_cycle = False\\n\\telse:\\n\\t\\tans[x] = x if in_cycle else ans[p[x]]\\n\\nfor i in range(N):\\n\\tp[i] -= 1\\nfor i in range(N):\\n\\tdfs(i) # in_cycle is always reset to False\\nfor i in range(N):\\n\\tans[i] += 1\\n\\nprint(*ans)\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: \"This code generates the answer independently for each connected component. Note\\nthat it uses 0-indexing, not 1-indexing.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Try simulating the algorithm on the following directed graph in CSAcademy's\\n\", _jsx(_components.a, {\n        href: \"https://csacademy.com/app/graph_editor/\",\n        target: \"_blank\",\n        rel: \"nofollow noopener noreferrer\",\n        children: \"Graph Editor\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"0 1\\n1 2\\n2 3\\n3 4\\n4 2\\n5 6\\n6 1\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"On the first step, we make the following recursive calls: \", _jsx(_components.code, {\n            children: \"gen(0)\"\n          }), \" -> \", _jsx(_components.code, {\n            children: \"gen(1)\"\n          }), \"\\n-> \", _jsx(_components.code, {\n            children: \"gen(2)\"\n          }), \" -> \", _jsx(_components.code, {\n            children: \"gen(3)\"\n          }), \" -> \", _jsx(_components.code, {\n            children: \"gen(4)\"\n          }), \" -> \", _jsx(_components.code, {\n            children: \"gen(2)\"\n          }), \", at which point we stop since\\n\", _jsx(_components.code, {\n            children: \"ans[2] = -1\"\n          }), \". Since we have reached \", _jsx(_components.code, {\n            children: \"2\"\n          }), \" for the second time, we know that \", _jsx(_components.code, {\n            children: \"2\"\n          }), \"\\nis part of a cycle and \", _jsx(_components.code, {\n            children: \"ans[2] = 2\"\n          }), \". Similarly, \", _jsx(_components.code, {\n            children: \"ans[3] = 3\"\n          }), \" and \", _jsx(_components.code, {\n            children: \"ans[4] = 4\"\n          }), \"\\nsince they are part of the cycle. On the other hand, \", _jsx(_components.code, {\n            children: \"ans[0] = ans[1] = 2\"\n          }), \"\\nsince neither of them are part of the cycle.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"Later, we make the following recursive calls when we start at vertex \", _jsx(_components.code, {\n            children: \"5\"\n          }), \":\\n\", _jsx(_components.code, {\n            children: \"gen(5)\"\n          }), \" -> \", _jsx(_components.code, {\n            children: \"gen(6)\"\n          }), \" -> \", _jsx(_components.code, {\n            children: \"gen(1)\"\n          }), \". We already know that \", _jsx(_components.code, {\n            children: \"ans[1] = 2\"\n          }), \", so\\n\", _jsx(_components.code, {\n            children: \"ans[5] = ans[6] = 2\"\n          }), \" as well.\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"solution-2\",\n      children: [_jsx(_components.a, {\n        href: \"#solution-2\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution 2\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"floyd(x)\"\n      }), \" generates answers for all vertices in the connected component containing\\n\", _jsx(_components.code, {\n        children: \"x\"\n      }), \". Requires reverse adjacency lists (\", _jsx(_components.code, {\n        children: \"radj\"\n      }), \").\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"#include <bits/stdc++.h>\\nusing namespace std;\\n\\nint N;\\nvector<int> adj, ans;\\nvector<vector<int>> radj;\\n\\nvoid fill_radj(int x)\\n{\\n\\tfor (auto &child : radj[x])\\n\\t{\\n\\t\\t/* \\n\\t\\t * As all nodes in the cycle are processed in function floyd,\\n\\t\\t * the recursive call will only start at the nodes which\\n\\t\\t * combine the cycle with the acyclic part of the connected component\\n\\t\\t * where one of its outgoing arrows points to the node that is not processed yet. \\n\\t\\t */\\n\\t\\tif (ans[child] == -1)\\n\\t\\t{\\n\\t\\t\\tans[child] = ans[x];\\n\\t\\t\\tfill_radj(child);\\n\\t\\t}\\n\\t}\\n}\\n\\nvoid floyd(int x)\\n{\\n\\tint y = x;\\n\\tdo\\n\\t{  // find a cycle using Floyd's algorithm\\n\\t\\tx = adj[x];\\n\\t\\ty = adj[adj[y]];\\n\\t} while (y != x);\\n\\tdo\\n\\t{  // set ans[x] = x for all x along cycle\\n\\t\\tans[x] = x;\\n\\t\\tx = adj[x];\\n\\t} while (y != x);\\n\\tdo\\n\\t{  // set ans'es for all x not along cycle\\n\\t\\tfill_radj(x);\\n\\t\\tx = adj[x];\\n\\t} while (y != x);\\n}\\n\\nint main()\\n{\\n\\tcin.tie(0)->sync_with_stdio(false);\\n\\tcin >> N;\\n\\n\\tadj.assign(N, -1);\\n\\tfor (auto &e : adj)\\n\\t{\\n\\t\\tcin >> e;\\n\\t\\te--;\\n\\t}\\n\\n\\t/* \\n\\t * For each node, we have to use a vector to store its children;  \\n\\t * at nodes combining the cycle with other parts of the connected component,\\n\\t * there would be more than one outgoing arrow in the reversed adjacency list\\n\\t */\\n\\tradj.assign(N, {});\\n\\tfor (int i = 0; i < N; i++)\\n\\t\\tradj[adj[i]].push_back(i);\\n\\n\\tans.assign(N, -1);\\n\\t// we run Floyd's algorithm for each connected component\\n\\tfor (int i = 0; i < N; i++)\\n\\t\\tif (ans[i] == -1)\\n\\t\\t\\tfloyd(i);\\n\\n\\tfor (auto &a : ans)\\n\\t\\tcout << a + 1 << \\\" \\\";\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\nimport java.io.*;\\n\\npublic class Badge {\\n\\tstatic Integer[] adj, ans;\\n\\t/*\\n\\t * For each node, we need a list to store its children; at nodes\\n\\t * combining the cycle with other part of the connected component, there would\\n\\t * be more than one outgoing arrow in the reversed adjacency list\\n\\t */\\n\\tstatic List<List<Integer>> radj;\\n\\n\\tpublic static void main(String[] args) throws IOException {\\n\\t\\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\\n\\n\\t\\tint N = Integer.parseInt(in.readLine());\\n\\t\\tadj = new Integer[N];\\n\\t\\tans = new Integer[N];\\n\\t\\tradj = new ArrayList<>();\\n\\n\\t\\tStringTokenizer st = new StringTokenizer(in.readLine());\\n\\t\\tfor (int i = 0; i < N; i++) {\\n\\t\\t\\tadj[i] = Integer.valueOf(st.nextToken()) - 1;\\n\\t\\t\\tans[i] = -1;\\n\\t\\t\\tradj.add(new ArrayList<>());\\n\\t\\t}\\n\\n\\t\\tfor (int i = 0; i < N; i++)\\n\\t\\t\\tradj.get(adj[i]).add(Integer.valueOf(i));\\n\\n\\t\\tfor (int i = 0; i < N; i++) {\\n\\t\\t\\t// run Floyd's algorithm on every connected component\\n\\t\\t\\tif (ans[i] == -1)\\n\\t\\t\\t\\tfloyd(i);\\n\\t\\t}\\n\\n\\t\\tfor (Integer i : ans) {\\n\\t\\t\\tSystem.out.print(i + 1);\\n\\t\\t\\tSystem.out.print(\\\" \\\");\\n\\t\\t}\\n\\t}\\n\\n\\tprivate static void floyd(int x) {\\n\\t\\tint a = adj[x];\\n\\t\\tint b = adj[adj[x]];\\n\\n\\t\\t// find a cycle using Floyd's algorithm\\n\\t\\twhile (a != b) {\\n\\t\\t\\ta = adj[a];\\n\\t\\t\\tb = adj[adj[b]];\\n\\t\\t}\\n\\n\\t\\t// for each node a in the cycle, the answer ans[a] will be a as well\\n\\t\\tdo {\\n\\t\\t\\tans[a] = a;\\n\\t\\t\\ta = adj[a];\\n\\t\\t} while (a != b);\\n\\n\\t\\t// for each node a that has outgoing arrow(s) pointing to the acyclic part\\n\\t\\t// we set their answers with fillRadj\\n\\t\\tdo {\\n\\t\\t\\tfillRadj(a);\\n\\t\\t\\ta = adj[a];\\n\\t\\t} while (a != b);\\n\\t}\\n\\n\\tprivate static void fillRadj(int x) {\\n\\t\\tfor (Integer child : radj.get(x)) {\\n\\t\\t\\t/*\\n\\t\\t\\t * As all nodes in the cycle are processed in method floyd, the recursive call\\n\\t\\t\\t * will only start at the nodes which combine the cycle with the acyclic part of\\n\\t\\t\\t * the connected component, where one of its outgoing arrows points to the node\\n\\t\\t\\t * that is not processed yet\\n\\t\\t\\t */\\n\\t\\t\\tif (ans[child] == -1) {\\n\\t\\t\\t\\tans[child] = ans[x];\\n\\t\\t\\t\\tfillRadj(child);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"count-cycles\",\n      children: [_jsx(_components.a, {\n        href: \"#count-cycles\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Count Cycles\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following sample code counts the number of cycles in such a graph. The\\n\\\"stack\\\" contains nodes that can reach the current node. If the current node\\npoints to a node \", _jsx(_components.code, {\n        children: \"v\"\n      }), \" on the stack (\", _jsx(_components.code, {\n        children: \"on_stack[v]\"\n      }), \" is true), then we know that a\\ncycle has been created. However, if the current node points to a node \", _jsx(_components.code, {\n        children: \"v\"\n      }), \" that\\nhas been previously visited but is not on the stack, then we know that the\\ncurrent chain of nodes points into a cycle that has already been considered.\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//UNTESTED\\n//Each node points to next_node[node]\\n\\nbool visited[MAXN], on_stack[MAXN];\\nint number_of_cycles = 0, next_node[MAXN];\\nvoid dfs(int n)\\n{\\n\\tvisited[n] = on_stack[n] = true;\\n\\tint u = next_node[n];\\n\\tif(on_stack[u])\\n\\t\\tnumber_of_cycles++;\\n\\telse if(!visited[u])\\n\\t\\tdfs(u);\\n\\ton_stack[n] = false;\\n}\\nint main()\\n{\\n\\t//read input, etc\\n\\tfor (int i = 1;i <= N;i++)\\n\\t\\tif(!visited[i])\\n\\t\\t\\tdfs(i);\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"//source: Mayank Kumar\\nimport java.io.*;\\nimport java.util.*;\\npublic class badge2{\\n\\tstatic boolean[] visited=new boolean[MAXN],onStack=new boolean[MAXN];\\n\\tstatic int numberOfCycles=0;\\n\\tstatic int[] nextNode=new int[MAXN];\\n\\tpublic static void main(String[] args) throws IOException{\\n\\t\\t//Take in input\\n\\t\\tfor(int i=1;i!=N;++i)\\n\\t\\t\\tif(!visited[i])\\n\\t\\t\\t\\tdfs(i);\\n\\t\\tSystem.out.println();\\n\\t\\tSystem.out.close();\\n\\t}\\n\\tpublic static void dfs(int n){\\n\\t\\tvisited[n]=onStack[n]=true;\\n\\t\\tint u=nextNode[n];\\n\\t\\tif(onStack[u])\\n\\t\\t\\t++numberOfCycles;\\n\\t\\telse if(!visited[u])\\n\\t\\t\\tdfs(u);\\n\\t\\tonStack[n]=false;\\n\\t}\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"k-th-successor\",\n      children: [_jsx(_components.a, {\n        href: \"#k-th-successor\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"K\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\\\"application/x-tex\\\">K</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span></span></span></span>\"\n      }), \"-th Successor\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As described briefly in CPH 16.3, the \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"k\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\\\"application/x-tex\\\">k</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.03148em;\\\">k</span></span></span></span>\"\n      }), \"-th successor of a certain node in a functional graph can be found in \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(\\\\log K)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>log</mi><mo>⁡</mo><mi>K</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(\\\\log K)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.07153em;\\\">K</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time\\nusing \", _jsx(_components.strong, {\n        children: \"binary jumping\"\n      }), \", given \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\mathcal{O}(n \\\\log u)\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>u</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(n \\\\log u)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\">n</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.1667em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n      }), \" time of preprocessing where \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"u\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\\\"application/x-tex\\\">u</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord mathnormal\\\">u</span></span></span></span>\"\n      }), \" is the maximum length of each jump. See the Platinum \", _jsx(_components.a, {\n        href: \"/plat/bin-jump\",\n        children: \"module\"\n      }), \" for details.\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"probs\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Additional problems involving functional graphs can be found in the\\n\", _jsx(_components.a, {\n        href: \"/gold/dp-trees\",\n        children: \"Tree DP\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/plat/bin-jump\",\n        children: \"Binary Jumping\"\n      }), \" modules.\"]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"(Optional) Introduction to Functional Graphs","author":"Siyong Huang, Benjamin Qi, Andrew Wang","contributors":"Chuyang Wang","id":"func-graphs","prerequisites":["intro-tree"],"description":"Directed graphs in which every vertex has exactly one outgoing edge.","frequency":1},"parent":{"name":"Func_Graphs","relativePath":"3_Silver/Func_Graphs.mdx"},"fields":{"division":"silver"},"toc":{"cpp":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Floyd&#39;s Algorithm","slug":"floyds-algorithm"},{"depth":3,"value":"Example - Cooperative Game","slug":"example---cooperative-game"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Example - Badge","slug":"example---badge"},{"depth":3,"value":"Solution 1","slug":"solution-1"},{"depth":3,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Count Cycles","slug":"count-cycles"},{"depth":2,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-th Successor","slug":"k-th-successor"},{"depth":2,"value":"Problems","slug":"problems"}],"java":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Floyd&#39;s Algorithm","slug":"floyds-algorithm"},{"depth":3,"value":"Example - Cooperative Game","slug":"example---cooperative-game"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Example - Badge","slug":"example---badge"},{"depth":3,"value":"Solution 1","slug":"solution-1"},{"depth":3,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Count Cycles","slug":"count-cycles"},{"depth":2,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-th Successor","slug":"k-th-successor"},{"depth":2,"value":"Problems","slug":"problems"}],"py":[{"depth":2,"value":"Introduction","slug":"introduction"},{"depth":2,"value":"Floyd&#39;s Algorithm","slug":"floyds-algorithm"},{"depth":3,"value":"Example - Cooperative Game","slug":"example---cooperative-game"},{"depth":3,"value":"Solution","slug":"solution"},{"depth":2,"value":"Example - Badge","slug":"example---badge"},{"depth":3,"value":"Solution 1","slug":"solution-1"},{"depth":3,"value":"Solution 2","slug":"solution-2"},{"depth":2,"value":"Count Cycles","slug":"count-cycles"},{"depth":2,"value":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-th Successor","slug":"k-th-successor"},{"depth":2,"value":"Problems","slug":"problems"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sample","problems":[{"uniqueId":"cf-1020B","name":"Div 2 B - Badge","url":"https://codeforces.com/contest/1020/problem/B","source":"CF","difficulty":"Very Easy","isStarred":false,"tags":["Functional Graph"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]},{"listId":"sample_floyd","problems":[{"uniqueId":"cf-1137D","name":"Cooperative Game","url":"https://codeforces.com/contest/1137/problem/D","source":"CF","difficulty":"Hard","isStarred":false,"tags":["Functional Graph"],"solution":{"kind":"label","label":"Check CF","labelTooltip":"Check contest materials, located to the right of the problem statement.","url":null,"sketch":null}}]},{"listId":"probs","problems":[{"uniqueId":"usaco-764","name":"The Bovine Shuffle","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=764","source":"Silver","difficulty":"Easy","isStarred":false,"tags":["Functional Graph"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1751","name":"Planets Cycles","url":"https://cses.fi/problemset/task/1751","source":"CSES","difficulty":"Easy","isStarred":true,"tags":["Functional Graph"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"func-graphs"}},
    "staticQueryHashes": ["3245546052","3813215756","745520438"]}