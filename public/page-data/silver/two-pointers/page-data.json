{
    "componentChunkName": "component---src-templates-module-template-tsx",
    "path": "/silver/two-pointers",
    "result": {"data":{"xdm":{"body":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _missingComponent(name) {\n  return function () {\n    throw new Error(\"Component `\" + name + \"` was not imported, exported, or given\");\n  };\n}\nconst id = \"two-pointers\", redirects = [\"/silver/2P\"], title = \"Two Pointers\", author = \"Darren Yao, Qi Wang, Ryan Chou\", contributors = \"Aadit Ambadkar\", prerequisites = [\"sorting-custom\"], description = \"Iterating two monotonic pointers across an array to search for a pair of indices satisfying some condition in linear time.\", frequency = 2;\nfunction MDXContent(_props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    a: \"a\",\n    p: \"p\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    Problems: _missingComponent(\"Problems\"),\n    HeaderLink: _missingComponent(\"HeaderLink\"),\n    Resources: _missingComponent(\"Resources\"),\n    Resource: _missingComponent(\"Resource\"),\n    FocusProblem: _missingComponent(\"FocusProblem\"),\n    MATHSPAN: _missingComponent(\"MATHSPAN\"),\n    Info: _missingComponent(\"Info\"),\n    LanguageSection: _missingComponent(\"LanguageSection\"),\n    CPPSection: _missingComponent(\"CPPSection\"),\n    JavaSection: _missingComponent(\"JavaSection\"),\n    Quiz: _missingComponent(\"Quiz\"),\n    PySection: _missingComponent(\"PySection\")\n  }, _props.components), {Problems, HeaderLink, Resources, Resource, FocusProblem, MATHSPAN, Info, LanguageSection, CPPSection, JavaSection, Quiz, PySection, wrapper: MDXLayout} = _components;\n  const _content = _jsxs(_Fragment, {\n    children: [_jsx(Problems, {\n      problems: \"sample\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"resources\",\n      children: [_jsx(_components.a, {\n        href: \"#resources\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Resources\"]\n    }), \"\\n\", _jsxs(Resources, {\n      children: [_jsx(Resource, {\n        source: \"CPH\",\n        title: \"8.1 - Two Pointers\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"solutions to the problems above\"\n        })\n      }), _jsx(Resource, {\n        source: \"IUSACO\",\n        title: \"14.1 - Two Pointers\",\n        children: _jsx(_components.p, {\n          children: \"above + mention of max subarray sum\"\n        })\n      }), _jsx(Resource, {\n        source: \"CF\",\n        title: \"CF Edu\",\n        url: \"https://codeforces.com/edu/course/2/lesson/9\",\n        starred: true,\n        children: _jsx(_components.p, {\n          children: \"video explanation of two pointers\"\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"two-pointers\",\n      children: [_jsx(_components.a, {\n        href: \"#two-pointers\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Two Pointers\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The two pointers method iterates two pointers across an array, to track the start and end\\nof an interval. It can also be used to track two values in an array as shown in \", _jsx(_components.a, {\n        href: \"/CPH.pdf#page=87\",\n        children: \"CPH's 2SUM\"\n      }), \" solution.\"]\n    }), \"\\n\", _jsx(FocusProblem, {\n      problem: \"book\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"solution---books\",\n      children: [_jsx(_components.a, {\n        href: \"#solution---books\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Solution - Books\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We want to find the longest contiguous segment of books that can be read within \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"t\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\\\"application/x-tex\\\">t</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6151em;\\\"></span><span class=\\\"mord mathnormal\\\">t</span></span></span></span>\"\n      }), \" minutes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To accomplish this, we can define \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" and \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{right}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n      }), \" to represent the beginning and end of the segment. Both will start at the beginning of the array. These numbers can be thought of as pointers, hence the name \\\"two pointers.\\\"\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For every value of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" in increasing order, let's increase \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{right}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span></span></span></span>\"\n      }), \" until the total time for the segment is maximized while being less than or equal to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"t\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\\\"application/x-tex\\\">t</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6151em;\\\"></span><span class=\\\"mord mathnormal\\\">t</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ans}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ans</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ans}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ans</span></span></span></span></span>\"\n      }), \" will store the maximum value of \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{right} - \\\\texttt{left}+1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">right</mtext><mo>âˆ’</mo><mtext mathvariant=\\\"monospace\\\">left</mtext><mo>+</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{right} - \\\\texttt{left}+1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.8333em;vertical-align:-0.2222em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">right</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">âˆ’</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6944em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \" (segment size) that we have encountered so far.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After incrementing \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{left}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">left</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{left}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6111em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">left</span></span></span></span></span>\"\n      }), \" by one, the time used decreases, hence the right pointer never has to move leftwards. Thus:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"Since both pointers will move at most \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"N\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n        }), \" times, the overall time complexity is \", _jsx(MATHSPAN, {\n          className: \"math math-inline\",\n          latex: \"\\\\mathcal{O}(N)\",\n          children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As an example, consider the first case in the sample inputs:\"\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsxs(\"table\", {\n        children: [_jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Left Pointer\"\n            }), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {}), _jsx(\"th\", {})]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"\\\\texttt{arr}[i]\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">arr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{arr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">arr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n              })\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"3\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"2\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            })]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Right Pointer\"\n            }), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {}), _jsx(\"th\", {})]\n          })\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We can move the right pointer to index \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \":\"]\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsxs(\"table\", {\n        children: [_jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Left Pointer\"\n            }), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {}), _jsx(\"th\", {})]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"\\\\texttt{arr}[i]\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">arr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{arr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">arr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n              })\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"3\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"2\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            })]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Right Pointer\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {})]\n          })\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The sum of the values in this range is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"4\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\\\"application/x-tex\\\">4</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span></span></span></span>\"\n      }), \", and there are \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \" values. So, the current maximum segment length is \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ans}=2\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ans</mtext><mo>=</mo><mn>2</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ans}=2</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ans</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">2</span></span></span></span>\"\n      }), \". By incrementing the left pointer by \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \", we can subtract \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \" from the sum of values to get \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>\"\n      }), \". The array then looks like:\"]\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsxs(\"table\", {\n        children: [_jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Left Pointer\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {})]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"\\\\texttt{arr}[i]\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">arr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{arr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">arr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n              })\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"3\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"2\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            })]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Right Pointer\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {})]\n          })\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, we can move the right pointer to the end. This makes the sum of values \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"1+2+1=4\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>1</mn><mo>+</mo><mn>2</mn><mo>+</mo><mn>1</mn><mo>=</mo><mn>4</mn></mrow><annotation encoding=\\\"application/x-tex\\\">1+2+1=4</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.7278em;vertical-align:-0.0833em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2222em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">4</span></span></span></span>\"\n      }), \" and the length of the segment equal to \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \". So, \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ans}\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ans</mtext></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ans}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ans</span></span></span></span></span>\"\n      }), \" is now \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(\"center\", {\n      children: _jsxs(\"table\", {\n        children: [_jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Left Pointer\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {})]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"\\\\texttt{arr}[i]\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">arr</mtext><mo stretchy=\\\"false\\\">[</mo><mi>i</mi><mo stretchy=\\\"false\\\">]</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{arr}[i]</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">arr</span></span><span class=\\\"mopen\\\">[</span><span class=\\\"mord mathnormal\\\">i</span><span class=\\\"mclose\\\">]</span></span></span></span>\"\n              })\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"3\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"2\"\n            }), \"\\n\", _jsx(\"td\", {\n              children: \"1\"\n            })]\n          })\n        }), _jsx(\"tbody\", {\n          children: _jsxs(\"tr\", {\n            children: [_jsx(\"td\", {\n              children: \"Right Pointer\"\n            }), _jsx(\"th\", {}), _jsx(\"th\", {}), _jsx(\"th\", {}), _jsx(\"th\", {\n              className: \"bg-yellow-100 dark:bg-yellow-800\"\n            })]\n          })\n        })]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Since the right pointer has reached the end of the array, we are done at this point. This leaves us with \", _jsx(MATHSPAN, {\n        className: \"math math-inline\",\n        latex: \"\\\\texttt{ans}=3\",\n        children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mtext mathvariant=\\\"monospace\\\">ans</mtext><mo>=</mo><mn>3</mn></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\texttt{ans}=3</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.4306em;\\\"></span><span class=\\\"mord text\\\"><span class=\\\"mord texttt\\\">ans</span></span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mspace\\\" style=\\\"margin-right:0.2778em;\\\"></span></span><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6444em;\\\"></span><span class=\\\"mord\\\">3</span></span></span></span>\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Info, {\n      title: \"Pro Tip\",\n      children: _jsx(_components.p, {\n        children: \"You can visualize these pointers as maintaining a sliding window of books for this problem.\"\n      })\n    }), \"\\n\", _jsxs(_components.h3, {\n      id: \"implementation\",\n      children: [_jsx(_components.a, {\n        href: \"#implementation\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Implementation\"]\n    }), \"\\n\", _jsxs(LanguageSection, {\n      children: [_jsx(CPPSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-cpp\",\n            children: \"//BeginCodeSnip{C++ Short Template}\\n#include <bits/stdc++.h> // see /general/running-code-locally\\nusing namespace std;\\n\\nusing ll = long long;\\n\\nusing vi = vector<int>;\\n#define pb push_back\\n#define all(x) begin(x), end(x)\\n#define sz(x) (int) (x).size()\\n\\nusing pi = pair<int,int>;\\n#define f first\\n#define s second\\n#define mp make_pair\\n\\nvoid setIO(string name = \\\"\\\") {\\n\\tcin.tie(0)->sync_with_stdio(0); // see /general/fast-io\\n\\tif (sz(name)) {\\n\\t\\tfreopen((name + \\\".in\\\").c_str(), \\\"r\\\", stdin); // see /general/input-output\\n\\t\\tfreopen((name + \\\".out\\\").c_str(), \\\"w\\\", stdout);\\n\\t}\\n}\\n//EndCodeSnip\\n\\nint main() {\\n\\tsetIO();\\n\\tint n, t, ans = 0;\\n\\tcin >> n >> t;\\n\\tvi books(n);\\n\\tfor (int i = 0; i < n; i++){\\n\\t\\tcin >> books[i];\\n\\t}\\n\\n\\tint left = 0, right = 0, cur = 0;\\n\\twhile (left < n && right < n) {\\n\\t\\t// Finding the maximum right for which cur is less than t.\\n\\t\\twhile (right < n) {\\n\\t\\t\\tcur += books[right++];\\n\\t\\t\\t// Subtracting the exceeded book from cur.\\n\\t\\t\\tif (cur > t) {\\n\\t\\t\\t\\tcur -= books[--right]; \\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tans = max(ans, right - left);\\n\\t\\tcur -= books[left++];\\n\\t}\\n\\n\\tcout << ans;\\n}\\n\"\n          })\n        })\n      }), _jsx(JavaSection, {\n        children: _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-java\",\n            children: \"import java.util.*;\\nimport java.io.*;\\n\\npublic class Books {\\n\\tpublic static void main(String[] args) {\\n\\t\\tKattio io = new Kattio();\\n\\n\\t\\tint n = io.nextInt();\\n\\t\\tint t = io.nextInt();\\n\\t\\tint[] books = new int[n];\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tbooks[i] = io.nextInt();\\n\\t\\t}\\n\\n\\t\\tint left = 0, right = 0, cur = 0, ans = 0;\\n\\t\\twhile (left < n && right < n) {\\n\\t\\t\\t// Finding the maximum right for which cur is less than t.\\n\\t\\t\\twhile (right < n) {\\n\\t\\t\\t\\tcur += books[right++];\\n\\t\\t\\t\\t// Subtracting the exceeded book from cur.\\n\\t\\t\\t\\tif (cur > t) {\\n\\t\\t\\t\\t\\tcur -= books[--right]; \\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tans = Math.max(ans, right - left);\\n\\t\\t\\tcur -= books[left++];\\n\\t\\t}\\n\\n\\t\\tio.println(ans);\\n\\t\\tio.close();\\n\\t}\\n\\n\\t//BeginCodeSnip{Kattio}\\n\\tstatic class Kattio extends PrintWriter {\\n\\t\\tprivate BufferedReader r;\\n\\t\\tprivate StringTokenizer st;\\n\\t\\t// standard input\\n\\t\\tpublic Kattio() { this(System.in, System.out); }\\n\\t\\tpublic Kattio(InputStream i, OutputStream o) {\\n\\t\\t\\tsuper(o);\\n\\t\\t\\tr = new BufferedReader(new InputStreamReader(i));\\n\\t\\t}\\n\\t\\t// USACO-style file input\\n\\t\\tpublic Kattio(String problemName) throws IOException {\\n\\t\\t\\tsuper(problemName + \\\".out\\\");\\n\\t\\t\\tr = new BufferedReader(new FileReader(problemName + \\\".in\\\"));\\n\\t\\t}\\n\\t\\t// returns null if no more input\\n\\t\\tpublic String next() {\\n\\t\\t\\ttry {\\n\\t\\t\\t\\twhile (st == null || !st.hasMoreTokens())\\n\\t\\t\\t\\t\\tst = new StringTokenizer(r.readLine());\\n\\t\\t\\t\\treturn st.nextToken();\\n\\t\\t\\t} catch (Exception e) { }\\n\\t\\t\\treturn null;\\n\\t\\t}\\n\\t\\tpublic int nextInt() { return Integer.parseInt(next()); }\\n\\t\\tpublic double nextDouble() { return Double.parseDouble(next()); }\\n\\t\\tpublic long nextLong() { return Long.parseLong(next()); }\\n\\t}\\n\\t//EndCodeSnip\\n}\\n\"\n          })\n        })\n      })]\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"problems\",\n      children: [_jsx(_components.a, {\n        href: \"#problems\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Problems\"]\n    }), \"\\n\", _jsx(Problems, {\n      problems: \"ad\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      id: \"quiz\",\n      children: [_jsx(_components.a, {\n        href: \"#quiz\",\n        \"aria-hidden\": \"true\",\n        tabIndex: \"-1\",\n        className: \"anchor before\",\n        children: _jsx(HeaderLink, {})\n      }), \"Quiz\"]\n    }), \"\\n\", _jsxs(Quiz, {\n      children: [_jsxs(Quiz.Question, {\n        children: [_jsx(_components.p, {\n          children: \"What is the two pointers algorithm?\"\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: \"Keeping track of two indices to find a subarray that satisfies some condition.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect. The indices don't necessarily have to represent a subarray, they could just represent elements in the array.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: \"Keeping track of two indices to find a pair of indices that satisfy some condition.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Correct.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsxs(_components.p, {\n            children: [\"A way to answer range sum queries in \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\mathcal{O}(1)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            }), \" time.\"]\n          }), _jsx(Quiz.Explanation, {\n            children: _jsxs(_components.p, {\n              children: [\"Incorrect. You might be thinking of \", _jsx(_components.a, {\n                href: \"/silver/prefix-sums\",\n                children: \"Prefix Sums\"\n              }), \", another silver topic.\"]\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: \"A divide and conquer algorithm that splits an array into two halves to efficiently find an element satisfying a certain condition.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect.\"\n            })\n          })]\n        })]\n      }), _jsxs(Quiz.Question, {\n        children: [_jsxs(_components.p, {\n          children: [\"What should go in place of \", _jsx(_components.code, {\n            children: \"???\"\n          }), \"?\"]\n        }), _jsxs(LanguageSection, {\n          children: [_jsx(CPPSection, {\n            children: _jsx(_components.pre, {\n              children: _jsx(_components.code, {\n                className: \"language-cpp\",\n                children: \"/*\\n* find two elements at distinct positions in an array \\n* which add up to a target sum\\n*/\\n\\nsort(begin(nums), end(nums));\\n\\nint l = 0;\\nint r = n - 1;\\n\\nwhile (???) {\\n\\tif (nums[l] + nums[r] == target) {\\n\\t\\t// found pair\\n\\t\\tbreak;\\n\\t}\\n\\telse if (nums[l] + nums[r] > target) {\\n\\t\\tr--;\\n\\t} else {\\n\\t\\tl++;\\n\\t}\\n}\\n\"\n              })\n            })\n          }), _jsx(JavaSection, {\n            children: _jsx(_components.pre, {\n              children: _jsx(_components.code, {\n                className: \"language-java\",\n                children: \"/*\\n* find two elements at distinct positions in an array \\n* which add up to a target sum\\n*/\\n\\nArrays.sort(nums);\\n\\nint l = 0;\\nint r = n - 1;\\n\\nwhile (???) {\\n\\tif (nums[l] + nums[r] == target) {\\n\\t\\t// found pair\\n\\t\\tbreak;\\n\\t}\\n\\telse if (nums[l] + nums[r] > target) {\\n\\t\\tr--;\\n\\t} else {\\n\\t\\tl++;\\n\\t}\\n}\\n\"\n              })\n            })\n          }), _jsx(PySection, {\n            children: _jsx(_components.pre, {\n              children: _jsx(_components.code, {\n                className: \"language-py\",\n                children: \"nums.sort()\\n\\nl = 0\\nr = n - 1\\n\\nwhile (???):\\n\\tif nums[l] + nums[r] == target:\\n\\t\\t# found pair\\n\\t\\tbreak\\n\\telif nums[l] + nums[r] > target:\\n\\t\\tr -= 1\\n\\telse: \\n\\t\\tl += 1\\n\"\n              })\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: _jsx(_components.code, {\n              children: \"nums[r] - nums[l] != 0\"\n            })\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect. We already have an exit condition in the loop and we're looking for two elements which add up to a target sum.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: _jsx(_components.code, {\n              children: \"l < r\"\n            })\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Correct. When the pointers overlap, they're looking for another solution to test when it doesn't exist.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsx(_components.p, {\n            children: _jsx(_components.code, {\n              children: \"l < 0 || l >= n || r < 0 || r >= n\"\n            })\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect. The pointers are moving towards the middle of the array.\"\n            })\n          })]\n        })]\n      }), _jsxs(Quiz.Question, {\n        children: [_jsx(_components.p, {\n          children: \"Which of the following isn't true?\"\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsxs(_components.p, {\n            children: [\"The time complexity of a standard two pointers algorithm is \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\mathcal{O}(N)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mi>N</mi><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            }), \" when not considering any other operations on the array.\"]\n          }), _jsx(Quiz.Explanation, {\n            children: _jsxs(_components.p, {\n              children: [\"Incorrect. Assuming that both pointers move one step at a time and the array isn't sorted, both pointers would take a maximum of \", _jsx(MATHSPAN, {\n                className: \"math math-inline\",\n                latex: \"N\",\n                children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\\\"application/x-tex\\\">N</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:0.6833em;\\\"></span><span class=\\\"mord mathnormal\\\" style=\\\"margin-right:0.10903em;\\\">N</span></span></span></span>\"\n              }), \" steps.\"]\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          children: [_jsxs(_components.p, {\n            children: [\"The space complexity of a standard two pointers algorithm is \", _jsx(MATHSPAN, {\n              className: \"math math-inline\",\n              latex: \"\\\\mathcal{O}(1)\",\n              children: \"<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math xmlns=\\\"http://www.w3.org/1998/Math/MathML\\\"><semantics><mrow><mi mathvariant=\\\"script\\\">O</mi><mo stretchy=\\\"false\\\">(</mo><mn>1</mn><mo stretchy=\\\"false\\\">)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\mathcal{O}(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"base\\\"><span class=\\\"strut\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"mord mathcal\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>\"\n            }), \" when not considering the space taken up by the array.\"]\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Incorrect. Assuming that both pointers move one step at a time and the array isn't sorted, there would be a constant space complexity.\"\n            })\n          })]\n        }), _jsxs(Quiz.Answer, {\n          correct: true,\n          children: [_jsx(_components.p, {\n            children: \"The two pointers algorithm is only useful in a sorted array.\"\n          }), _jsx(Quiz.Explanation, {\n            children: _jsx(_components.p, {\n              children: \"Correct. The array doesn't necessarily have to be sorted, such as when looking for a valid subarray with two pointers.\"\n            })\n          })]\n        })]\n      })]\n    })]\n  });\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, _props, {\n    children: _content\n  })) : _content;\n}\nreturn {\n  id,\n  redirects,\n  title,\n  author,\n  contributors,\n  prerequisites,\n  description,\n  frequency,\n  default: MDXContent\n};\n","frontmatter":{"title":"Two Pointers","author":"Darren Yao, Qi Wang, Ryan Chou","contributors":"Aadit Ambadkar","id":"two-pointers","prerequisites":["sorting-custom"],"description":"Iterating two monotonic pointers across an array to search for a pair of indices satisfying some condition in linear time.","frequency":2},"parent":{"name":"Two_Pointers","relativePath":"3_Silver/Two_Pointers.mdx"},"fields":{"division":"silver"},"toc":{"cpp":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Two Pointers","slug":"two-pointers"},{"depth":2,"value":"Solution - Books","slug":"solution---books"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Quiz","slug":"quiz"}],"java":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Two Pointers","slug":"two-pointers"},{"depth":2,"value":"Solution - Books","slug":"solution---books"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Quiz","slug":"quiz"}],"py":[{"depth":2,"value":"Resources","slug":"resources"},{"depth":2,"value":"Two Pointers","slug":"two-pointers"},{"depth":2,"value":"Solution - Books","slug":"solution---books"},{"depth":3,"value":"Implementation","slug":"implementation"},{"depth":2,"value":"Problems","slug":"problems"},{"depth":2,"value":"Quiz","slug":"quiz"}]}},"moduleProblemLists":{"problemLists":[{"listId":"sample","problems":[{"uniqueId":"cses-1640","name":"Sum of Two Values","url":"https://cses.fi/problemset/task/1640","source":"CSES","difficulty":"Easy","isStarred":true,"tags":[],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cses-1660","name":"Subarray Sums I","url":"https://cses.fi/problemset/task/1660","source":"CSES","difficulty":"Easy","isStarred":false,"tags":[],"solution":{"kind":"link","label":"CPH 8.1","labelTooltip":null,"url":"/CPH.pdf#page=87","sketch":null}}]},{"listId":"book","problems":[{"uniqueId":"cf-279B","name":"Books","url":"https://codeforces.com/contest/279/problem/B","source":"CF","difficulty":"Easy","isStarred":true,"tags":["2P"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]},{"listId":"ad","problems":[{"uniqueId":"cses-1641","name":"Sum of Three Values","url":"https://cses.fi/problemset/task/1641","source":"CSES","difficulty":"Easy","isStarred":true,"tags":["2P","Sorting"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-738","name":"Paired Up","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=738","source":"Silver","difficulty":"Easy","isStarred":false,"tags":["2P","Sorting"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-702C","name":"Cellular Network","url":"https://codeforces.com/contest/702/problem/C","source":"CF","difficulty":"Easy","isStarred":false,"tags":["2P"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-701C","name":"They Are Everywhere","url":"https://codeforces.com/problemset/problem/701/C","source":"CF","difficulty":"Easy","isStarred":false,"tags":["2P"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-643","name":"Diamond Collector","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=643","source":"Silver","difficulty":"Normal","isStarred":true,"tags":["2P","Sorting"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"usaco-918","name":"Sleepy Cow Herding","url":"http://www.usaco.org/index.php?page=viewproblem2&cpid=918","source":"Silver","difficulty":"Normal","isStarred":false,"tags":["2P","Sorting"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}},{"uniqueId":"cf-814C","name":"Garland","url":"https://codeforces.com/problemset/problem/814/C","source":"CF","difficulty":"Normal","isStarred":false,"tags":["2P"],"solution":{"kind":"internal","label":null,"labelTooltip":null,"url":null,"sketch":null}}]}]}},"pageContext":{"id":"two-pointers"}},
    "staticQueryHashes": ["3245546052","3813215756","745520438"]}